import { injectable } from "inversify";
import container from "../../../../config/container";
import IDENTIFIERS from "../../../../config/identifiers";
import { {{ListEntityController}} } from "..";
import { {{ListEntityDto}}, {{EntityDto}} } from "../../dtos";

it("should invoke the list action", async () => {
  // start: mock
  container.unbind(IDENTIFIERS.{{ListEntityAction}});
  container.unbind(IDENTIFIERS.{{CountEntityAction}});
  container
    .bind<{{ListEntityMockAction}}>(IDENTIFIERS.{{ListEntityAction}})
    .to({{ListEntityMockAction}});
  container
    .bind<{{CountEntityMockAction}}>(IDENTIFIERS.{{CountEntityAction}})
    .to({{CountEntityMockAction}});  
  // end: mock

  const controller = container.get<{{ListEntityController}}>(
    IDENTIFIERS.{{ListEntityController}}
  );

  const { data } = await controller.execute({});
  expect(data).toEqual([
    {
      id: "f2901959-b087-4495-92a5-441d9c1efd36",
      title: "title 2",
      createdAt: "2022-01-31T10:14:37.535Z",
      updatedAt: "2022-01-31T10:14:37.535Z",
    },
    {
      id: "f2901959-b087-4495-92a5-441d9c1efd37",
      title: "title 1",
      createdAt: "2022-01-31T10:14:37.535Z",
      updatedAt: "2022-01-31T10:14:37.535Z",
    },
  ]);
});

it("should generate the pagination info", async () => {
  // start: mock
  container.unbind(IDENTIFIERS.{{ListEntityAction}});
  container.unbind(IDENTIFIERS.{{CountEntityAction}});
  container
    .bind<{{ListEntityMockAction}}>(IDENTIFIERS.{{ListEntityAction}})
    .to({{ListEntityMockAction}});
  container
    .bind<{{CountEntityMockAction}}>(IDENTIFIERS.{{CountEntityAction}})
    .to({{CountEntityMockAction}});  
  // end: mock

  const controller = container.get<{{ListEntityController}}>(
    IDENTIFIERS.{{ListEntityController}}
  );

  // default
  const { meta: meta1 } = await controller.execute({});
  expect(meta1).toEqual({
    pagination: {
      total: 2,
      page: 1,
      pageSize: 25,
      pageCount: 1,
    },
  });

  const { meta: meta2 } = await controller.execute({
    page: 1,
    perPage: 5,
  });
  expect(meta2).toEqual({
    pagination: {
      total: 2,
      page: 1,
      pageSize: 5,
      pageCount: 1,
    },
  });

  const { meta: meta3 } = await controller.execute({
    page: 10,
    perPage: 500,
  });
  expect(meta3).toEqual({
    pagination: {
      total: 2,
      page: 10,
      pageSize: 200,
      pageCount: 1,
    },
  });
});

/**
 * Mock Action
 */
@injectable()
class {{ListEntityMockAction}} {
  async handle(dto: {{ListEntityDto}}): Promise<{{EntityDto}}[] | []> {
    if (dto.filter?.q === "null") {
      return [];
    }
    return [
      {
        id: "f2901959-b087-4495-92a5-441d9c1efd36",
        title: "title 2",
        createdAt: "2022-01-31T10:14:37.535Z",
        updatedAt: "2022-01-31T10:14:37.535Z",
      },
      {
        id: "f2901959-b087-4495-92a5-441d9c1efd37",
        title: "title 1",
        createdAt: "2022-01-31T10:14:37.535Z",
        updatedAt: "2022-01-31T10:14:37.535Z",
      },
    ];
  }
}

@injectable()
class {{CountEntityMockAction}} {
  async handle(dto: {{ListEntityDto}}): Promise<number> {
    if (dto === {}) {
      return 0;
    }
    return 2;
  }
}
